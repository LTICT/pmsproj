pipeline {
    agent any

    environment {
        // Docker image details
        QA_DOCKER_IMAGE = 'otecpms/laravel-app-qa'
        PROD_DOCKER_IMAGE = 'otecpms/laravel-app-prod'
        REGISTRY_CREDENTIALS = 'dockerhub-credentials' // Jenkins credentials ID for Docker registry
        ENV_FILE_PATH = '/var/jenkins_home/pms_files/prod-backend.env'

        PORT_EXT  = 1111
        PORT_INT  = 1155
        DOCKER_REGISTRY_URL = 'https://index.docker.io/v1/' // Updated Docker Hub registry URL
    }

    options {
        retry(3) // Retry up to 3 times on failure
    }

    stages {
        stage('Pull QA Docker Image') {
            steps {
                script {
                    // Use the Docker Hub v1 endpoint for authentication
                    docker.withRegistry(DOCKER_REGISTRY_URL, REGISTRY_CREDENTIALS) {
                        sh "docker pull ${QA_DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Tag for Prod') {
            steps {
                script {
                    // Construct the versioned tag using the Jenkins build number
                    def versionedProdImage = "${PROD_DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                    
                    // Tag the QA image with the versioned production tag
                    sh "docker tag ${QA_DOCKER_IMAGE}:latest ${versionedProdImage}"
                    
                    // Optionally, you can also tag it as 'latest' for convenience
                    sh "docker tag ${versionedProdImage} ${PROD_DOCKER_IMAGE}:latest"
                    
                    // Store the versioned image name for later stages
                    env.VERSIONED_PROD_IMAGE = versionedProdImage
                }
            }
        }

        stage('Push Prod Docker Image') {
            steps {
                script {
                    docker.withRegistry(DOCKER_REGISTRY_URL, REGISTRY_CREDENTIALS) {
                        // Push the versioned production image
                        sh "docker push ${env.VERSIONED_PROD_IMAGE}"
                        
                        // Push the 'latest' tag if you opted to update it
                        sh "docker push ${PROD_DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Deploy to Prod Server') {
            steps {
                script {
                    // Define the image to deploy (versioned)
                    def imageToDeploy = env.VERSIONED_PROD_IMAGE

                    // Stop and remove any existing production container named 'laravel_app_prod'
                    sh '''
                        if [ $(docker ps -a -q -f name=laravel_app_prod) ]; then
                            docker stop laravel_app_prod || true
                            docker rm laravel_app_prod || true
                        fi
                    '''

                    // Run a new container using the versioned production image
                    sh """
                        docker run -d \
    -v /var/www/html/public/uploads/projectfiles:/var/www/dev_app_backend/public/uploads/projectfiles \
    -p ${PORT_EXT}:${PORT_INT} \
    --name laravel_app_prod \
    --env-file ${ENV_FILE_PATH} \
    --restart always \
-e PHP_INI_UPLOAD_MAX_FILESIZE=100M \\
-e PHP_INI_POST_MAX_SIZE=101M \\
-v /www/html/configfiles/custom-php.ini:/etc/php/8.2/fpm/conf.d/custom-php.ini \
    ${imageToDeploy}
                    """
 // Run artisan optimize inside the container
sh """
    docker exec laravel_app_prod php artisan config:cache
    docker exec laravel_app_prod php artisan route:cache
"""

                }
            }
        }
    }

    post {
        success {
            echo "Production pipeline executed successfully with image version ${env.BUILD_NUMBER}!"
        }
        failure {
            echo 'Production pipeline execution failed!'
        }
    }
}
