pipeline {
    agent any

    // --------------------------
    // Global Configuration
    // --------------------------
    environment {
        // Docker image details
        DOCKER_IMAGE         = 'otecpms/laravel-app-dev'
        DOCKER_TAG           = 'latest'
        FULL_DOCKER_IMAGE    = "${DOCKER_IMAGE}:${DOCKER_TAG}"
        
        // Docker Registry
        REGISTRY_URL         = 'https://registry.hub.docker.com'
        REGISTRY_CREDENTIALS = 'dockerhub-credentials'  // Jenkins credentials ID
        
        // Environment / Ports
        ENV_FILE_PATH        = '/var/jenkins_home/pms_files/dev-backend.env'
        PORT_EXT             = '1213'
        PORT_INT             = '1155'
        
        // Container name
        CONTAINER_NAME       = 'laravel_app_dev'
    }

    // --------------------------
    // Pipeline-Level Options
    // --------------------------
    options {
        retry(3)  // Retry failed stages up to 3 times if they fail
    }

    // --------------------------
    // Stages
    // --------------------------
    stages {

        /*
        stage('Clean Workspace and Pull') {
            steps {
                script {
                    sh '''
                        echo "Cleaning the workspace..."
                        git clean -fdx         # Remove all untracked files and directories
                        git reset --hard       # Reset any changes to tracked files
                        
                        echo "Pulling the latest code from the repository..."
                        git pull origin main
                    '''
                }
            }
        }

        stage('Clean Docker Cache') {
            steps {
                script {
                    sh '''
                        echo "Cleaning up Docker cache..."
                        # Remove dangling images
                        docker image prune -f
                        
                        # Remove unused volumes
                        docker volume prune -f
                        
                        # Remove unused networks
                        docker network prune -f
                        
                        # Remove stopped containers
                        docker container prune -f
                        
                        echo "Docker cache cleanup completed."
                    '''
                }
            }
        }
        */

        stage('Checkout') {
            steps {
                git branch: 'main', 
                    credentialsId: 'github-token', 
                    url: 'https://github.com/LTICT/pmsproj.git'
            }
        }

        stage('Prepare Environment File') {
            steps {
                script {
                    sh """
                        echo "Copying environment file to workspace..."
                        cp ${ENV_FILE_PATH} .env
                        echo "Environment file copied successfully."
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        echo "Building Docker image..."
                        docker build -t ${FULL_DOCKER_IMAGE} .
                        echo "Docker image built successfully."
                    """
                }
            }
        }
/*
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("${REGISTRY_URL}", "${REGISTRY_CREDENTIALS}") {
                        // Push the versioned image
                        docker.image("${FULL_DOCKER_IMAGE}").push()
                        
                        // Push again to ensure the :latest tag is also updated
                        docker.image("${DOCKER_IMAGE}").push("${DOCKER_TAG}")
                    }
                }
            }
        }
*/
        stage('Deploy Docker Container') {
            steps {
                script {
                    // Stop and remove the existing container if itâ€™s running
                    sh """
                        if [ \$(docker ps -a -q -f name=${CONTAINER_NAME}) ]; then
                            echo "Stopping and removing existing container (${CONTAINER_NAME})..."
                            docker stop ${CONTAINER_NAME} || true
                            docker rm ${CONTAINER_NAME} || true
                        fi
                    """

                    // Run the new container with --env-file to load environment variables
                    sh """
                        echo "Starting a new Docker container..."
                        docker run -d \\
                            -p ${PORT_EXT}:${PORT_INT} \\
                            --name ${CONTAINER_NAME} \\
                            --restart always \\
                            --env-file ${ENV_FILE_PATH} \\
                            ${FULL_DOCKER_IMAGE}
                            
                        echo "Container started successfully on port ${PORT_EXT}."
                    """
                }
            }
        }
    }

    // --------------------------
    // Post Actions
    // --------------------------
    post {
        always {
            echo 'Pipeline execution finished.'
        }
        success {
            echo 'Build and deployment were successful!'
        }
        failure {
            echo 'Build or deployment failed.'
        }
    }
}
