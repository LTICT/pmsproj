pipeline {
    agent any

    environment {
        // Update to your own Docker image name/tag
        DOCKER_IMAGE = 'otecpms/laravel-app'
        DOCKER_TAG  = 'latest'
 
        FULL_DOCKER_IMAGE = "${DOCKER_IMAGE}:${DOCKER_TAG}"
        REGISTRY_CREDENTIALS = 'dockerhub-credentials' // Jenkins credentials ID for Docker registry
    }       
    options {
        retry(3) // Retry up to 3 times
    }


    stages {
        stage('Checkout') {
            steps {
                // Pull the source code from GitHub
                git branch: 'main', 
                    credentialsId: 'github-token', 
                    url: 'https://github.com/LTICT/pmsproj.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the image using the Dockerfile in your repo
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    """
                }
            }
        }
 
     
           stage('Push to Docker Registry') {
            steps {
                script {
                    // If you want to push the image to a registry like Docker Hub:
                    docker.withRegistry('', "${REGISTRY_CREDENTIALS}") {
                        sh """
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

     
        stage('Deploy (Run Docker Container)') {
            steps {
                script {
                    // Optional: remove existing container before re-deploy
                    sh """
                        docker rm -f laravel_app || true
                    """

                    // Run a new container from the built image on port 1144
                    sh """
                        docker run -d -p 1155:1155 --name laravel_app \
                            --restart always \
                            ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline has finished.'
        }
        success {
            echo 'Build and deploy were successful!'
        }
        failure {
            echo 'Build or deploy failed.'
        }
    }
}
